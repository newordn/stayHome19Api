module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateQuarantaine {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createQuarantaine(data: QuarantaineCreateInput!): Quarantaine!
  updateQuarantaine(data: QuarantaineUpdateInput!, where: QuarantaineWhereUniqueInput!): Quarantaine
  updateManyQuarantaines(data: QuarantaineUpdateManyMutationInput!, where: QuarantaineWhereInput): BatchPayload!
  upsertQuarantaine(where: QuarantaineWhereUniqueInput!, create: QuarantaineCreateInput!, update: QuarantaineUpdateInput!): Quarantaine!
  deleteQuarantaine(where: QuarantaineWhereUniqueInput!): Quarantaine
  deleteManyQuarantaines(where: QuarantaineWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Quarantaine {
  id: ID!
  image: String!
  date: DateTime!
  user: User!
}

type QuarantaineConnection {
  pageInfo: PageInfo!
  edges: [QuarantaineEdge]!
  aggregate: AggregateQuarantaine!
}

input QuarantaineCreateInput {
  id: ID
  image: String!
  user: UserCreateOneWithoutQuarantainesInput!
}

input QuarantaineCreateManyWithoutUserInput {
  create: [QuarantaineCreateWithoutUserInput!]
  connect: [QuarantaineWhereUniqueInput!]
}

input QuarantaineCreateWithoutUserInput {
  id: ID
  image: String!
}

type QuarantaineEdge {
  node: Quarantaine!
  cursor: String!
}

enum QuarantaineOrderByInput {
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  date_ASC
  date_DESC
}

type QuarantainePreviousValues {
  id: ID!
  image: String!
  date: DateTime!
}

input QuarantaineScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  AND: [QuarantaineScalarWhereInput!]
  OR: [QuarantaineScalarWhereInput!]
  NOT: [QuarantaineScalarWhereInput!]
}

type QuarantaineSubscriptionPayload {
  mutation: MutationType!
  node: Quarantaine
  updatedFields: [String!]
  previousValues: QuarantainePreviousValues
}

input QuarantaineSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: QuarantaineWhereInput
  AND: [QuarantaineSubscriptionWhereInput!]
  OR: [QuarantaineSubscriptionWhereInput!]
  NOT: [QuarantaineSubscriptionWhereInput!]
}

input QuarantaineUpdateInput {
  image: String
  user: UserUpdateOneRequiredWithoutQuarantainesInput
}

input QuarantaineUpdateManyDataInput {
  image: String
}

input QuarantaineUpdateManyMutationInput {
  image: String
}

input QuarantaineUpdateManyWithoutUserInput {
  create: [QuarantaineCreateWithoutUserInput!]
  delete: [QuarantaineWhereUniqueInput!]
  connect: [QuarantaineWhereUniqueInput!]
  set: [QuarantaineWhereUniqueInput!]
  disconnect: [QuarantaineWhereUniqueInput!]
  update: [QuarantaineUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [QuarantaineUpsertWithWhereUniqueWithoutUserInput!]
  deleteMany: [QuarantaineScalarWhereInput!]
  updateMany: [QuarantaineUpdateManyWithWhereNestedInput!]
}

input QuarantaineUpdateManyWithWhereNestedInput {
  where: QuarantaineScalarWhereInput!
  data: QuarantaineUpdateManyDataInput!
}

input QuarantaineUpdateWithoutUserDataInput {
  image: String
}

input QuarantaineUpdateWithWhereUniqueWithoutUserInput {
  where: QuarantaineWhereUniqueInput!
  data: QuarantaineUpdateWithoutUserDataInput!
}

input QuarantaineUpsertWithWhereUniqueWithoutUserInput {
  where: QuarantaineWhereUniqueInput!
  update: QuarantaineUpdateWithoutUserDataInput!
  create: QuarantaineCreateWithoutUserInput!
}

input QuarantaineWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  date: DateTime
  date_not: DateTime
  date_in: [DateTime!]
  date_not_in: [DateTime!]
  date_lt: DateTime
  date_lte: DateTime
  date_gt: DateTime
  date_gte: DateTime
  user: UserWhereInput
  AND: [QuarantaineWhereInput!]
  OR: [QuarantaineWhereInput!]
  NOT: [QuarantaineWhereInput!]
}

input QuarantaineWhereUniqueInput {
  id: ID
}

type Query {
  quarantaine(where: QuarantaineWhereUniqueInput!): Quarantaine
  quarantaines(where: QuarantaineWhereInput, orderBy: QuarantaineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quarantaine]!
  quarantainesConnection(where: QuarantaineWhereInput, orderBy: QuarantaineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): QuarantaineConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  quarantaine(where: QuarantaineSubscriptionWhereInput): QuarantaineSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  phone: String!
  password: String!
  position: String!
  note: Int
  quarantaines(where: QuarantaineWhereInput, orderBy: QuarantaineOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Quarantaine!]
  createdAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  phone: String!
  password: String!
  position: String!
  note: Int
  quarantaines: QuarantaineCreateManyWithoutUserInput
}

input UserCreateOneWithoutQuarantainesInput {
  create: UserCreateWithoutQuarantainesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutQuarantainesInput {
  id: ID
  name: String!
  phone: String!
  password: String!
  position: String!
  note: Int
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  position_ASC
  position_DESC
  note_ASC
  note_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  phone: String!
  password: String!
  position: String!
  note: Int
  createdAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  phone: String
  password: String
  position: String
  note: Int
  quarantaines: QuarantaineUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  name: String
  phone: String
  password: String
  position: String
  note: Int
}

input UserUpdateOneRequiredWithoutQuarantainesInput {
  create: UserCreateWithoutQuarantainesInput
  update: UserUpdateWithoutQuarantainesDataInput
  upsert: UserUpsertWithoutQuarantainesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutQuarantainesDataInput {
  name: String
  phone: String
  password: String
  position: String
  note: Int
}

input UserUpsertWithoutQuarantainesInput {
  update: UserUpdateWithoutQuarantainesDataInput!
  create: UserCreateWithoutQuarantainesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  position: String
  position_not: String
  position_in: [String!]
  position_not_in: [String!]
  position_lt: String
  position_lte: String
  position_gt: String
  position_gte: String
  position_contains: String
  position_not_contains: String
  position_starts_with: String
  position_not_starts_with: String
  position_ends_with: String
  position_not_ends_with: String
  note: Int
  note_not: Int
  note_in: [Int!]
  note_not_in: [Int!]
  note_lt: Int
  note_lte: Int
  note_gt: Int
  note_gte: Int
  quarantaines_every: QuarantaineWhereInput
  quarantaines_some: QuarantaineWhereInput
  quarantaines_none: QuarantaineWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  phone: String
}
`
      }
    